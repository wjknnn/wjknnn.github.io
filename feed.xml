<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://wjknnn.github.io/</id><title>moments;</title><subtitle>A minimal, responsive and feature-rich Jekyll theme for technical writing.</subtitle> <updated>2024-03-05T08:37:20+09:00</updated> <author> <name>Seungwoo</name> <uri>https://wjknnn.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://wjknnn.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="ko-KR" href="https://wjknnn.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator> <rights> © 2024 Seungwoo </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>[Javascript] Optional chaining</title><link href="https://wjknnn.github.io/posts/Javascript-optionalChaining/" rel="alternate" type="text/html" title="[Javascript] Optional chaining" /><published>2023-12-16T23:35:00+09:00</published> <updated>2024-01-20T14:55:52+09:00</updated> <id>https://wjknnn.github.io/posts/Javascript-optionalChaining/</id> <content src="https://wjknnn.github.io/posts/Javascript-optionalChaining/" /> <author> <name>wjknnn</name> </author> <category term="Language" /> <category term="Javascript" /> <summary> Optional chaining 문법은 프로퍼티가 없는 중첩 객체를 에러 없이 안전하게 접근할 수 있게 해준다. 사용 이유 아래의 코드를 보자. user객체의 street값을 콘솔에 출력하려 한다. 그렇다면 출력 코드를 아래와 같이 짜게 될 것이다. let user = { name: "John", age: 18, address: { street: "AwesomeLoad" } }; console.log(user.address.street); // AwesomeLoad 그럼 만약 아래와 같은 상활일 때 street을 출력하면 어떻게 될까? let user = {}; console.log(user.address.street); // TypeError: Cannot read... </summary> </entry> <entry><title>[Javascript] this</title><link href="https://wjknnn.github.io/posts/Javascript-this/" rel="alternate" type="text/html" title="[Javascript] this" /><published>2023-12-15T19:57:00+09:00</published> <updated>2023-12-19T13:44:35+09:00</updated> <id>https://wjknnn.github.io/posts/Javascript-this/</id> <content src="https://wjknnn.github.io/posts/Javascript-this/" /> <author> <name>wjknnn</name> </author> <category term="Language" /> <category term="Javascript" /> <summary> js에서의 this가 상황에 따라서 어떤 값을 가지는지 가끔 헷갈리는 경우가 종종 있다. 하지만 알고보면 꽤 간단하다. this는 다음과 같은 규칙을 따른다. 1. new 바인딩 만약 함수를 호출할 때 new키워드를 사용한다면, 함수 내부에 있는 this는 완전히 새로운 객체를 반환해 준다. function constructorExample() { this.value = 10; console.log(this); } new constructorExample(); // output : { value: 10 } 2. 명시적 바인딩 만약 함수를 호출할 때 apply나 call 또는 bind를 사용한다면, 함수 내부의 this는 인수로 전달된 객체를 반환해 준다. function fn()... </summary> </entry> </feed>
